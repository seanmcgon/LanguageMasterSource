{"ast":null,"code":"import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\r\n * A Socket is the fundamental class for interacting with the server.\r\n *\r\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\r\n *\r\n * @example\r\n * const socket = io();\r\n *\r\n * socket.on(\"connect\", () => {\r\n *   console.log(\"connected\");\r\n * });\r\n *\r\n * // send an event to the server\r\n * socket.emit(\"foo\", \"bar\");\r\n *\r\n * socket.on(\"foobar\", () => {\r\n *   // an event was received from the server\r\n * });\r\n *\r\n * // upon disconnection\r\n * socket.on(\"disconnect\", (reason) => {\r\n *   console.log(`disconnected due to ${reason}`);\r\n * });\r\n */\nexport class Socket extends Emitter {\n  /**\r\n   * `Socket` constructor.\r\n   */\n  constructor(io, nsp, opts) {\n    super();\n    /**\r\n     * Whether the socket is currently connected to the server.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"connect\", () => {\r\n     *   console.log(socket.connected); // true\r\n     * });\r\n     *\r\n     * socket.on(\"disconnect\", () => {\r\n     *   console.log(socket.connected); // false\r\n     * });\r\n     */\n    this.connected = false;\n    /**\r\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\r\n     * be transmitted by the server.\r\n     */\n    this.recovered = false;\n    /**\r\n     * Buffer for packets received before the CONNECT packet\r\n     */\n    this.receiveBuffer = [];\n    /**\r\n     * Buffer for packets that will be sent once the socket is connected\r\n     */\n    this.sendBuffer = [];\n    /**\r\n     * The queue of packets to be sent with retry in case of failure.\r\n     *\r\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\r\n     * @private\r\n     */\n    this._queue = [];\n    /**\r\n     * A sequence to generate the ID of the {@link QueuedPacket}.\r\n     * @private\r\n     */\n    this._queueSeq = 0;\n    this.ids = 0;\n    /**\r\n     * A map containing acknowledgement handlers.\r\n     *\r\n     * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\r\n     *\r\n     * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\r\n     * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\r\n     * - `const value = await socket.emitWithAck(\"test\")`\r\n     *\r\n     * From those that don't:\r\n     *\r\n     * - `socket.emit(\"test\", (value) => { ... });`\r\n     *\r\n     * In the first case, the handlers will be called with an error when:\r\n     *\r\n     * - the timeout is reached\r\n     * - the socket gets disconnected\r\n     *\r\n     * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\r\n     * an acknowledgement from the server.\r\n     *\r\n     * @private\r\n     */\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n    this._opts = Object.assign({}, opts);\n    if (this.io._autoConnect) this.open();\n  }\n  /**\r\n   * Whether the socket is currently disconnected\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * socket.on(\"connect\", () => {\r\n   *   console.log(socket.disconnected); // false\r\n   * });\r\n   *\r\n   * socket.on(\"disconnect\", () => {\r\n   *   console.log(socket.disconnected); // true\r\n   * });\r\n   */\n  get disconnected() {\n    return !this.connected;\n  }\n  /**\r\n   * Subscribe to open, close and packet events\r\n   *\r\n   * @private\r\n   */\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\r\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects.\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * console.log(socket.active); // true\r\n   *\r\n   * socket.on(\"disconnect\", (reason) => {\r\n   *   if (reason === \"io server disconnect\") {\r\n   *     // the disconnection was initiated by the server, you need to manually reconnect\r\n   *     console.log(socket.active); // false\r\n   *   }\r\n   *   // else the socket will automatically try to reconnect\r\n   *   console.log(socket.active); // true\r\n   * });\r\n   */\n  get active() {\n    return !!this.subs;\n  }\n  /**\r\n   * \"Opens\" the socket.\r\n   *\r\n   * @example\r\n   * const socket = io({\r\n   *   autoConnect: false\r\n   * });\r\n   *\r\n   * socket.connect();\r\n   */\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\r\n   * Alias for {@link connect()}.\r\n   */\n  open() {\n    return this.connect();\n  }\n  /**\r\n   * Sends a `message` event.\r\n   *\r\n   * This method mimics the WebSocket.send() method.\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\r\n   *\r\n   * @example\r\n   * socket.send(\"hello\");\r\n   *\r\n   * // this is equivalent to\r\n   * socket.emit(\"message\", \"hello\");\r\n   *\r\n   * @return self\r\n   */\n  send() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\r\n   * Override `emit`.\r\n   * If the event is in `events`, it's emitted normally.\r\n   *\r\n   * @example\r\n   * socket.emit(\"hello\", \"world\");\r\n   *\r\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\r\n   * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\r\n   *\r\n   * // with an acknowledgement from the server\r\n   * socket.emit(\"hello\", \"world\", (val) => {\r\n   *   // ...\r\n   * });\r\n   *\r\n   * @return self\r\n   */\n  emit(ev) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    args.unshift(ev);\n    if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n      this._addToQueue(args);\n      return this;\n    }\n    const packet = {\n      type: PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false;\n    // event ack callback\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      const ack = args.pop();\n      this._registerAckCallback(id, ack);\n      packet.id = id;\n    }\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n    if (discardPacket) {} else if (this.connected) {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n    this.flags = {};\n    return this;\n  }\n  /**\r\n   * @private\r\n   */\n  _registerAckCallback(id, ack) {\n    var _this = this;\n    var _a;\n    const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    }\n    // @ts-ignore\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n    const fn = function () {\n      // @ts-ignore\n      _this.io.clearTimeoutFn(timer);\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      ack.apply(_this, args);\n    };\n    fn.withError = true;\n    this.acks[id] = fn;\n  }\n  /**\r\n   * Emits an event and waits for an acknowledgement\r\n   *\r\n   * @example\r\n   * // without timeout\r\n   * const response = await socket.emitWithAck(\"hello\", \"world\");\r\n   *\r\n   * // with a specific timeout\r\n   * try {\r\n   *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\r\n   * } catch (err) {\r\n   *   // the server did not acknowledge the event in the given delay\r\n   * }\r\n   *\r\n   * @return a Promise that will be fulfilled when the server acknowledges the event\r\n   */\n  emitWithAck(ev) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n    return new Promise((resolve, reject) => {\n      const fn = (arg1, arg2) => {\n        return arg1 ? reject(arg1) : resolve(arg2);\n      };\n      fn.withError = true;\n      args.push(fn);\n      this.emit(ev, ...args);\n    });\n  }\n  /**\r\n   * Add the packet to the queue.\r\n   * @param args\r\n   * @private\r\n   */\n  _addToQueue(args) {\n    var _this2 = this;\n    let ack;\n    if (typeof args[args.length - 1] === \"function\") {\n      ack = args.pop();\n    }\n    const packet = {\n      id: this._queueSeq++,\n      tryCount: 0,\n      pending: false,\n      args,\n      flags: Object.assign({\n        fromQueue: true\n      }, this.flags)\n    };\n    args.push(function (err) {\n      if (packet !== _this2._queue[0]) {\n        // the packet has already been acknowledged\n        return;\n      }\n      const hasError = err !== null;\n      if (hasError) {\n        if (packet.tryCount > _this2._opts.retries) {\n          _this2._queue.shift();\n          if (ack) {\n            ack(err);\n          }\n        }\n      } else {\n        _this2._queue.shift();\n        if (ack) {\n          for (var _len5 = arguments.length, responseArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n            responseArgs[_key5 - 1] = arguments[_key5];\n          }\n          ack(null, ...responseArgs);\n        }\n      }\n      packet.pending = false;\n      return _this2._drainQueue();\n    });\n    this._queue.push(packet);\n    this._drainQueue();\n  }\n  /**\r\n   * Send the first packet of the queue, and wait for an acknowledgement from the server.\r\n   * @param force - whether to resend a packet that has not been acknowledged yet\r\n   *\r\n   * @private\r\n   */\n  _drainQueue() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!this.connected || this._queue.length === 0) {\n      return;\n    }\n    const packet = this._queue[0];\n    if (packet.pending && !force) {\n      return;\n    }\n    packet.pending = true;\n    packet.tryCount++;\n    this.flags = packet.flags;\n    this.emit.apply(this, packet.args);\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  packet(packet) {\n    packet.nsp = this.nsp;\n    this.io._packet(packet);\n  }\n  /**\r\n   * Called upon engine `open`.\r\n   *\r\n   * @private\r\n   */\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this._sendConnectPacket(data);\n      });\n    } else {\n      this._sendConnectPacket(this.auth);\n    }\n  }\n  /**\r\n   * Sends a CONNECT packet to initiate the Socket.IO session.\r\n   *\r\n   * @param data\r\n   * @private\r\n   */\n  _sendConnectPacket(data) {\n    this.packet({\n      type: PacketType.CONNECT,\n      data: this._pid ? Object.assign({\n        pid: this._pid,\n        offset: this._lastOffset\n      }, data) : data\n    });\n  }\n  /**\r\n   * Called upon engine or manager `error`.\r\n   *\r\n   * @param err\r\n   * @private\r\n   */\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\r\n   * Called upon engine `close`.\r\n   *\r\n   * @param reason\r\n   * @param description\r\n   * @private\r\n   */\n  onclose(reason, description) {\n    this.connected = false;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason, description);\n    this._clearAcks();\n  }\n  /**\r\n   * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\r\n   * the server.\r\n   *\r\n   * @private\r\n   */\n  _clearAcks() {\n    Object.keys(this.acks).forEach(id => {\n      const isBuffered = this.sendBuffer.some(packet => String(packet.id) === id);\n      if (!isBuffered) {\n        // note: handlers that do not accept an error as first argument are ignored here\n        const ack = this.acks[id];\n        delete this.acks[id];\n        if (ack.withError) {\n          ack.call(this, new Error(\"socket has been disconnected\"));\n        }\n      }\n    });\n  }\n  /**\r\n   * Called with socket packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n    switch (packet.type) {\n      case PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          this.onconnect(packet.data.sid, packet.data.pid);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n        break;\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n      case PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n      case PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message);\n        // @ts-ignore\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\r\n   * Called upon a server event.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  onevent(packet) {\n    const args = packet.data || [];\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n    super.emit.apply(this, args);\n    if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n      this._lastOffset = args[args.length - 1];\n    }\n  }\n  /**\r\n   * Produces an ack callback to emit with an event.\r\n   *\r\n   * @private\r\n   */\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function () {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      self.packet({\n        type: PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\r\n   * Called upon a server acknowledgement.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n  onack(packet) {\n    const ack = this.acks[packet.id];\n    if (typeof ack !== \"function\") {\n      return;\n    }\n    delete this.acks[packet.id];\n    // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n    if (ack.withError) {\n      packet.data.unshift(null);\n    }\n    // @ts-ignore\n    ack.apply(this, packet.data);\n  }\n  /**\r\n   * Called upon server connect.\r\n   *\r\n   * @private\r\n   */\n  onconnect(id, pid) {\n    this.id = id;\n    this.recovered = pid && this._pid === pid;\n    this._pid = pid; // defined only if connection state recovery is enabled\n    this.connected = true;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n    this._drainQueue(true);\n  }\n  /**\r\n   * Emit buffered events (received and emitted).\r\n   *\r\n   * @private\r\n   */\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    });\n    this.sendBuffer = [];\n  }\n  /**\r\n   * Called upon server disconnect.\r\n   *\r\n   * @private\r\n   */\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\r\n   * Called upon forced client/server side disconnections,\r\n   * this method ensures the manager stops tracking us and\r\n   * that reconnections don't get triggered for this.\r\n   *\r\n   * @private\r\n   */\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n    this.io[\"_destroy\"](this);\n  }\n  /**\r\n   * Disconnects the socket manually. In that case, the socket will not try to reconnect.\r\n   *\r\n   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\r\n   *\r\n   * @example\r\n   * const socket = io();\r\n   *\r\n   * socket.on(\"disconnect\", (reason) => {\r\n   *   // console.log(reason); prints \"io client disconnect\"\r\n   * });\r\n   *\r\n   * socket.disconnect();\r\n   *\r\n   * @return self\r\n   */\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: PacketType.DISCONNECT\n      });\n    }\n    // remove socket from pool\n    this.destroy();\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n    return this;\n  }\n  /**\r\n   * Alias for {@link disconnect()}.\r\n   *\r\n   * @return self\r\n   */\n  close() {\n    return this.disconnect();\n  }\n  /**\r\n   * Sets the compress flag.\r\n   *\r\n   * @example\r\n   * socket.compress(false).emit(\"hello\");\r\n   *\r\n   * @param compress - if `true`, compresses the sending data\r\n   * @return self\r\n   */\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n   * ready to send messages.\r\n   *\r\n   * @example\r\n   * socket.volatile.emit(\"hello\"); // the server may or may not receive it\r\n   *\r\n   * @returns self\r\n   */\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n   *\r\n   * @example\r\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n   *   if (err) {\r\n   *     // the server did not acknowledge the event in the given delay\r\n   *   }\r\n   * });\r\n   *\r\n   * @returns self\r\n   */\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * @example\r\n   * socket.onAny((event, ...args) => {\r\n   *   console.log(`got ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.push(listener);\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * @example\r\n   * socket.prependAny((event, ...args) => {\r\n   *   console.log(`got event ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.unshift(listener);\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @example\r\n   * const catchAllListener = (event, ...args) => {\r\n   *   console.log(`got event ${event}`);\r\n   * }\r\n   *\r\n   * socket.onAny(catchAllListener);\r\n   *\r\n   * // remove a specific listener\r\n   * socket.offAny(catchAllListener);\r\n   *\r\n   * // or remove all listeners\r\n   * socket.offAny();\r\n   *\r\n   * @param listener\r\n   */\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   */\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * Note: acknowledgements sent to the server are not included.\r\n   *\r\n   * @example\r\n   * socket.onAnyOutgoing((event, ...args) => {\r\n   *   console.log(`sent event ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.push(listener);\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * Note: acknowledgements sent to the server are not included.\r\n   *\r\n   * @example\r\n   * socket.prependAnyOutgoing((event, ...args) => {\r\n   *   console.log(`sent event ${event}`);\r\n   * });\r\n   *\r\n   * @param listener\r\n   */\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.unshift(listener);\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @example\r\n   * const catchAllListener = (event, ...args) => {\r\n   *   console.log(`sent event ${event}`);\r\n   * }\r\n   *\r\n   * socket.onAnyOutgoing(catchAllListener);\r\n   *\r\n   * // remove a specific listener\r\n   * socket.offAnyOutgoing(catchAllListener);\r\n   *\r\n   * // or remove all listeners\r\n   * socket.offAnyOutgoing();\r\n   *\r\n   * @param [listener] - the catch-all listener (optional)\r\n   */\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   */\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  /**\r\n   * Notify the listeners for each packet sent\r\n   *\r\n   * @param packet\r\n   *\r\n   * @private\r\n   */\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n}","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","constructor","io","nsp","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","disconnected","subEvents","subs","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","_len","arguments","length","args","Array","_key","unshift","emit","apply","ev","hasOwnProperty","Error","toString","_len2","_key2","retries","fromQueue","volatile","_addToQueue","packet","type","EVENT","data","options","compress","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","notifyOutgoingListeners","push","_this","_a","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","call","fn","clearTimeoutFn","_len3","_key3","withError","emitWithAck","_len4","_key4","Promise","resolve","reject","arg1","arg2","_this2","tryCount","pending","err","hasError","shift","_len5","responseArgs","_key5","_drainQueue","force","_packet","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","_clearAcks","keys","forEach","isBuffered","some","String","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","_len6","_key6","emitBuffered","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing"],"sources":["C:/Users/smcgo/OneDrive/Documents/CS320/LanguageMaster - Sean/LanguageMasterSource/client/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\n/**\r\n * A Socket is the fundamental class for interacting with the server.\r\n *\r\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\r\n *\r\n * @example\r\n * const socket = io();\r\n *\r\n * socket.on(\"connect\", () => {\r\n *   console.log(\"connected\");\r\n * });\r\n *\r\n * // send an event to the server\r\n * socket.emit(\"foo\", \"bar\");\r\n *\r\n * socket.on(\"foobar\", () => {\r\n *   // an event was received from the server\r\n * });\r\n *\r\n * // upon disconnection\r\n * socket.on(\"disconnect\", (reason) => {\r\n *   console.log(`disconnected due to ${reason}`);\r\n * });\r\n */\r\nexport class Socket extends Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        /**\r\n         * Whether the socket is currently connected to the server.\r\n         *\r\n         * @example\r\n         * const socket = io();\r\n         *\r\n         * socket.on(\"connect\", () => {\r\n         *   console.log(socket.connected); // true\r\n         * });\r\n         *\r\n         * socket.on(\"disconnect\", () => {\r\n         *   console.log(socket.connected); // false\r\n         * });\r\n         */\r\n        this.connected = false;\r\n        /**\r\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\r\n         * be transmitted by the server.\r\n         */\r\n        this.recovered = false;\r\n        /**\r\n         * Buffer for packets received before the CONNECT packet\r\n         */\r\n        this.receiveBuffer = [];\r\n        /**\r\n         * Buffer for packets that will be sent once the socket is connected\r\n         */\r\n        this.sendBuffer = [];\r\n        /**\r\n         * The queue of packets to be sent with retry in case of failure.\r\n         *\r\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\r\n         * @private\r\n         */\r\n        this._queue = [];\r\n        /**\r\n         * A sequence to generate the ID of the {@link QueuedPacket}.\r\n         * @private\r\n         */\r\n        this._queueSeq = 0;\r\n        this.ids = 0;\r\n        /**\r\n         * A map containing acknowledgement handlers.\r\n         *\r\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\r\n         *\r\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\r\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\r\n         * - `const value = await socket.emitWithAck(\"test\")`\r\n         *\r\n         * From those that don't:\r\n         *\r\n         * - `socket.emit(\"test\", (value) => { ... });`\r\n         *\r\n         * In the first case, the handlers will be called with an error when:\r\n         *\r\n         * - the timeout is reached\r\n         * - the socket gets disconnected\r\n         *\r\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\r\n         * an acknowledgement from the server.\r\n         *\r\n         * @private\r\n         */\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        this._opts = Object.assign({}, opts);\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Whether the socket is currently disconnected\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"connect\", () => {\r\n     *   console.log(socket.disconnected); // false\r\n     * });\r\n     *\r\n     * socket.on(\"disconnect\", () => {\r\n     *   console.log(socket.disconnected); // true\r\n     * });\r\n     */\r\n    get disconnected() {\r\n        return !this.connected;\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on(io, \"open\", this.onopen.bind(this)),\r\n            on(io, \"packet\", this.onpacket.bind(this)),\r\n            on(io, \"error\", this.onerror.bind(this)),\r\n            on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * console.log(socket.active); // true\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   if (reason === \"io server disconnect\") {\r\n     *     // the disconnection was initiated by the server, you need to manually reconnect\r\n     *     console.log(socket.active); // false\r\n     *   }\r\n     *   // else the socket will automatically try to reconnect\r\n     *   console.log(socket.active); // true\r\n     * });\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @example\r\n     * const socket = io({\r\n     *   autoConnect: false\r\n     * });\r\n     *\r\n     * socket.connect();\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for {@link connect()}.\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * This method mimics the WebSocket.send() method.\r\n     *\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\r\n     *\r\n     * @example\r\n     * socket.send(\"hello\");\r\n     *\r\n     * // this is equivalent to\r\n     * socket.emit(\"message\", \"hello\");\r\n     *\r\n     * @return self\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @example\r\n     * socket.emit(\"hello\", \"world\");\r\n     *\r\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\r\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\r\n     *\r\n     * // with an acknowledgement from the server\r\n     * socket.emit(\"hello\", \"world\", (val) => {\r\n     *   // ...\r\n     * });\r\n     *\r\n     * @return self\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\r\n            this._addToQueue(args);\r\n            return this;\r\n        }\r\n        const packet = {\r\n            type: PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            const id = this.ids++;\r\n            const ack = args.pop();\r\n            this._registerAckCallback(id, ack);\r\n            packet.id = id;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n        }\r\n        else if (this.connected) {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _registerAckCallback(id, ack) {\r\n        var _a;\r\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\r\n        if (timeout === undefined) {\r\n            this.acks[id] = ack;\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const timer = this.io.setTimeoutFn(() => {\r\n            delete this.acks[id];\r\n            for (let i = 0; i < this.sendBuffer.length; i++) {\r\n                if (this.sendBuffer[i].id === id) {\r\n                    this.sendBuffer.splice(i, 1);\r\n                }\r\n            }\r\n            ack.call(this, new Error(\"operation has timed out\"));\r\n        }, timeout);\r\n        const fn = (...args) => {\r\n            // @ts-ignore\r\n            this.io.clearTimeoutFn(timer);\r\n            ack.apply(this, args);\r\n        };\r\n        fn.withError = true;\r\n        this.acks[id] = fn;\r\n    }\r\n    /**\r\n     * Emits an event and waits for an acknowledgement\r\n     *\r\n     * @example\r\n     * // without timeout\r\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\r\n     *\r\n     * // with a specific timeout\r\n     * try {\r\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\r\n     * } catch (err) {\r\n     *   // the server did not acknowledge the event in the given delay\r\n     * }\r\n     *\r\n     * @return a Promise that will be fulfilled when the server acknowledges the event\r\n     */\r\n    emitWithAck(ev, ...args) {\r\n        return new Promise((resolve, reject) => {\r\n            const fn = (arg1, arg2) => {\r\n                return arg1 ? reject(arg1) : resolve(arg2);\r\n            };\r\n            fn.withError = true;\r\n            args.push(fn);\r\n            this.emit(ev, ...args);\r\n        });\r\n    }\r\n    /**\r\n     * Add the packet to the queue.\r\n     * @param args\r\n     * @private\r\n     */\r\n    _addToQueue(args) {\r\n        let ack;\r\n        if (typeof args[args.length - 1] === \"function\") {\r\n            ack = args.pop();\r\n        }\r\n        const packet = {\r\n            id: this._queueSeq++,\r\n            tryCount: 0,\r\n            pending: false,\r\n            args,\r\n            flags: Object.assign({ fromQueue: true }, this.flags),\r\n        };\r\n        args.push((err, ...responseArgs) => {\r\n            if (packet !== this._queue[0]) {\r\n                // the packet has already been acknowledged\r\n                return;\r\n            }\r\n            const hasError = err !== null;\r\n            if (hasError) {\r\n                if (packet.tryCount > this._opts.retries) {\r\n                    this._queue.shift();\r\n                    if (ack) {\r\n                        ack(err);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._queue.shift();\r\n                if (ack) {\r\n                    ack(null, ...responseArgs);\r\n                }\r\n            }\r\n            packet.pending = false;\r\n            return this._drainQueue();\r\n        });\r\n        this._queue.push(packet);\r\n        this._drainQueue();\r\n    }\r\n    /**\r\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\r\n     * @param force - whether to resend a packet that has not been acknowledged yet\r\n     *\r\n     * @private\r\n     */\r\n    _drainQueue(force = false) {\r\n        if (!this.connected || this._queue.length === 0) {\r\n            return;\r\n        }\r\n        const packet = this._queue[0];\r\n        if (packet.pending && !force) {\r\n            return;\r\n        }\r\n        packet.pending = true;\r\n        packet.tryCount++;\r\n        this.flags = packet.flags;\r\n        this.emit.apply(this, packet.args);\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this._sendConnectPacket(data);\r\n            });\r\n        }\r\n        else {\r\n            this._sendConnectPacket(this.auth);\r\n        }\r\n    }\r\n    /**\r\n     * Sends a CONNECT packet to initiate the Socket.IO session.\r\n     *\r\n     * @param data\r\n     * @private\r\n     */\r\n    _sendConnectPacket(data) {\r\n        this.packet({\r\n            type: PacketType.CONNECT,\r\n            data: this._pid\r\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\r\n                : data,\r\n        });\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            this.emitReserved(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */\r\n    onclose(reason, description) {\r\n        this.connected = false;\r\n        delete this.id;\r\n        this.emitReserved(\"disconnect\", reason, description);\r\n        this._clearAcks();\r\n    }\r\n    /**\r\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\r\n     * the server.\r\n     *\r\n     * @private\r\n     */\r\n    _clearAcks() {\r\n        Object.keys(this.acks).forEach((id) => {\r\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\r\n            if (!isBuffered) {\r\n                // note: handlers that do not accept an error as first argument are ignored here\r\n                const ack = this.acks[id];\r\n                delete this.acks[id];\r\n                if (ack.withError) {\r\n                    ack.call(this, new Error(\"socket has been disconnected\"));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    this.onconnect(packet.data.sid, packet.data.pid);\r\n                }\r\n                else {\r\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case PacketType.CONNECT_ERROR:\r\n                this.destroy();\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                this.emitReserved(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        if (null != packet.id) {\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\r\n            this._lastOffset = args[args.length - 1];\r\n        }\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            self.packet({\r\n                type: PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowledgement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (typeof ack !== \"function\") {\r\n            return;\r\n        }\r\n        delete this.acks[packet.id];\r\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\r\n        if (ack.withError) {\r\n            packet.data.unshift(null);\r\n        }\r\n        // @ts-ignore\r\n        ack.apply(this, packet.data);\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id, pid) {\r\n        this.id = id;\r\n        this.recovered = pid && this._pid === pid;\r\n        this._pid = pid; // defined only if connection state recovery is enabled\r\n        this.connected = true;\r\n        this.emitBuffered();\r\n        this.emitReserved(\"connect\");\r\n        this._drainQueue(true);\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        });\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\r\n     *\r\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   // console.log(reason); prints \"io client disconnect\"\r\n     * });\r\n     *\r\n     * socket.disconnect();\r\n     *\r\n     * @return self\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            this.packet({ type: PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for {@link disconnect()}.\r\n     *\r\n     * @return self\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @example\r\n     * socket.compress(false).emit(\"hello\");\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @example\r\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\r\n     *\r\n     * @returns self\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * @example\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     *\r\n     * @returns self\r\n     */\r\n    timeout(timeout) {\r\n        this.flags.timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @example\r\n     * socket.onAny((event, ...args) => {\r\n     *   console.log(`got ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @example\r\n     * socket.prependAny((event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAny(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAny(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAny();\r\n     *\r\n     * @param listener\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    onAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */\r\n    prependAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAnyOutgoing(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAnyOutgoing();\r\n     *\r\n     * @param [listener] - the catch-all listener (optional)\r\n     */\r\n    offAnyOutgoing(listener) {\r\n        if (!this._anyOutgoingListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyOutgoingListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyOutgoingListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */\r\n    listenersAnyOutgoing() {\r\n        return this._anyOutgoingListeners || [];\r\n    }\r\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */\r\n    notifyOutgoingListeners(packet) {\r\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\r\n            const listeners = this._anyOutgoingListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, packet.data);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,EAAE,QAAQ,SAAS;AAC5B,SAASC,OAAO,QAAS,8BAA8B;AACvD;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGC,MAAM,CAACC,MAAM,CAAC;EAClCC,OAAO,EAAE,CAAC;EACVC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,CAAC;EACbC,aAAa,EAAE,CAAC;EAChB;EACAC,WAAW,EAAE,CAAC;EACdC,cAAc,EAAE;AACpB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,SAASV,OAAO,CAAC;EAChC;AACJ;AACA;EACIW,WAAWA,CAACC,EAAE,EAAEC,GAAG,EAAEC,IAAI,EAAE;IACvB,KAAK,CAAC,CAAC;IACP;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;AACR;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB;AACR;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB;AACR;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,GAAG,GAAG,CAAC;IACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;IACd,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACf,IAAI,CAACX,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAIC,IAAI,IAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}